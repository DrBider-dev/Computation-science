/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.awt.Color;
import java.awt.*;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.*;
import javax.swing.border.LineBorder;


/**
 *
 * @author Brayan
 */
public class HSquareSearch extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(HSquareSearch.class.getName());
    
    private static final Color BG = new Color(18, 18, 18);
    private static final Color MINT = new Color(124, 212, 187);
    private static final Color LABEL_WHITE = Color.WHITE;
    private static final int CELL_WIDTH = 100;
    private static final int CELL_HEIGHT = 70;
    
    private Integer[] array; // modelo del arreglo (null = vacío)
    
    int xMouse, yMouse;
    
    private static HSquareSearch instance;
    
    public static HSquareSearch getInstance() {
        if (instance == null) {
            instance = new HSquareSearch();
        }
        return instance;
    }

    /**
     * Creates new form LinealSearch
     */
    public HSquareSearch() {
        setNimbusLookAndFeel();
        initComponents();
        initArrayVisualizer();
    }
    
    private void setNimbusLookAndFeel() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backGround = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        volverTxt = new javax.swing.JLabel();
        dragPanel = new javax.swing.JPanel();
        txtTamaño = new javax.swing.JLabel();
        txtSize = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        txtValor = new javax.swing.JLabel();
        txtInsertValue = new javax.swing.JTextField();
        btnInsert = new javax.swing.JButton();
        txtBuscar = new javax.swing.JLabel();
        txtSearchValue = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        txtModificarIndice = new javax.swing.JLabel();
        txtModifyIndex = new javax.swing.JTextField();
        txtNuevoValor = new javax.swing.JLabel();
        txtModifyValue = new javax.swing.JTextField();
        btnModify = new javax.swing.JButton();
        txtEliminar = new javax.swing.JLabel();
        txtDeleteIndex = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        scrollPaneCells = new javax.swing.JScrollPane();
        panelCells = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hash&Seek");
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backGround.setBackground(new java.awt.Color(18, 18, 18));
        backGround.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logo.setFont(new java.awt.Font("Calibri", 3, 48)); // NOI18N
        logo.setForeground(new java.awt.Color(124, 212, 187));
        logo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/HasMidSquareTitle.png"))); // NOI18N
        backGround.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 870, 150));

        volverTxt.setFont(new java.awt.Font("Cambria Math", 0, 48)); // NOI18N
        volverTxt.setForeground(new java.awt.Color(255, 255, 255));
        volverTxt.setText("< Volver");
        volverTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        volverTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volverTxtMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                volverTxtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                volverTxtMouseExited(evt);
            }
        });
        backGround.add(volverTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        dragPanel.setBackground(new java.awt.Color(18, 18, 18));
        dragPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        dragPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                dragPanelMouseDragged(evt);
            }
        });
        dragPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dragPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout dragPanelLayout = new javax.swing.GroupLayout(dragPanel);
        dragPanel.setLayout(dragPanelLayout);
        dragPanelLayout.setHorizontalGroup(
            dragPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
        );
        dragPanelLayout.setVerticalGroup(
            dragPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        backGround.add(dragPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 50));

        txtTamaño.setForeground(new java.awt.Color(255, 255, 255));
        txtTamaño.setText("Tamaño:");
        backGround.add(txtTamaño, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, -1));

        txtSize.setBackground(new java.awt.Color(102, 102, 102));
        txtSize.setForeground(new java.awt.Color(255, 255, 255));
        txtSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSizeActionPerformed(evt);
            }
        });
        backGround.add(txtSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 100, -1));

        btnCreate.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnCreate.setForeground(new java.awt.Color(255, 255, 255));
        btnCreate.setText("Crear arreglo");
        btnCreate.setBorder(null);
        btnCreate.setContentAreaFilled(false);
        btnCreate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCreateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCreateMouseExited(evt);
            }
        });
        backGround.add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, 120, 30));

        txtValor.setForeground(new java.awt.Color(255, 255, 255));
        txtValor.setText("Valor:");
        backGround.add(txtValor, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 210, -1, -1));

        txtInsertValue.setBackground(new java.awt.Color(102, 102, 102));
        txtInsertValue.setForeground(new java.awt.Color(255, 255, 255));
        backGround.add(txtInsertValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 210, 70, -1));

        btnInsert.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnInsert.setForeground(new java.awt.Color(255, 255, 255));
        btnInsert.setText("Insertar");
        btnInsert.setBorder(null);
        btnInsert.setContentAreaFilled(false);
        btnInsert.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInsert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnInsertMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnInsertMouseExited(evt);
            }
        });
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });
        backGround.add(btnInsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 250, -1, -1));

        txtBuscar.setForeground(new java.awt.Color(255, 255, 255));
        txtBuscar.setText("Buscar:");
        backGround.add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 210, -1, -1));

        txtSearchValue.setBackground(new java.awt.Color(102, 102, 102));
        txtSearchValue.setForeground(new java.awt.Color(255, 255, 255));
        backGround.add(txtSearchValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 210, 80, -1));

        btnSearch.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Buscar");
        btnSearch.setBorder(null);
        btnSearch.setContentAreaFilled(false);
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSearchMouseExited(evt);
            }
        });
        backGround.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 250, -1, -1));

        txtModificarIndice.setForeground(new java.awt.Color(255, 255, 255));
        txtModificarIndice.setText("Indice:");
        backGround.add(txtModificarIndice, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 210, -1, -1));

        txtModifyIndex.setBackground(new java.awt.Color(102, 102, 102));
        txtModifyIndex.setForeground(new java.awt.Color(255, 255, 255));
        backGround.add(txtModifyIndex, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 210, 80, -1));

        txtNuevoValor.setForeground(new java.awt.Color(255, 255, 255));
        txtNuevoValor.setText("Nuevo Valor:");
        backGround.add(txtNuevoValor, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 210, -1, -1));

        txtModifyValue.setBackground(new java.awt.Color(102, 102, 102));
        txtModifyValue.setForeground(new java.awt.Color(255, 255, 255));
        txtModifyValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModifyValueActionPerformed(evt);
            }
        });
        backGround.add(txtModifyValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 210, 90, -1));

        btnModify.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnModify.setForeground(new java.awt.Color(255, 255, 255));
        btnModify.setText("Modificar");
        btnModify.setBorder(null);
        btnModify.setContentAreaFilled(false);
        btnModify.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnModify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnModifyMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnModifyMouseExited(evt);
            }
        });
        backGround.add(btnModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 250, -1, -1));

        txtEliminar.setForeground(new java.awt.Color(255, 255, 255));
        txtEliminar.setText("Indice a Eliminar:");
        backGround.add(txtEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 210, -1, -1));

        txtDeleteIndex.setBackground(new java.awt.Color(102, 102, 102));
        txtDeleteIndex.setForeground(new java.awt.Color(255, 255, 255));
        backGround.add(txtDeleteIndex, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 210, 80, -1));

        btnDelete.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Eliminar");
        btnDelete.setBorder(null);
        btnDelete.setContentAreaFilled(false);
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDeleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDeleteMouseExited(evt);
            }
        });
        backGround.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 250, -1, -1));

        panelCells.setBackground(new java.awt.Color(18, 18, 18));
        scrollPaneCells.setViewportView(panelCells);

        backGround.add(scrollPaneCells, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 1250, 360));

        getContentPane().add(backGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverTxtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverTxtMouseEntered
        volverTxt.setForeground(new Color(124, 212, 187));
    }//GEN-LAST:event_volverTxtMouseEntered

    private void volverTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverTxtMouseExited
        volverTxt.setForeground(Color.WHITE);
    }//GEN-LAST:event_volverTxtMouseExited

    private void volverTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverTxtMouseClicked
        this.setVisible(false);
        PrincipalPage.getInstance().setVisible(true);
    }//GEN-LAST:event_volverTxtMouseClicked

    private void dragPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragPanelMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_dragPanelMousePressed

    private void dragPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragPanelMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_dragPanelMouseDragged

    private void txtSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSizeActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInsertActionPerformed

    private void txtModifyValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModifyValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModifyValueActionPerformed

    private void btnCreateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateMouseEntered
        btnCreate.setForeground(MINT);
    }//GEN-LAST:event_btnCreateMouseEntered

    private void btnCreateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateMouseExited
        btnCreate.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnCreateMouseExited

    private void btnInsertMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertMouseEntered
        btnInsert.setForeground(MINT);
    }//GEN-LAST:event_btnInsertMouseEntered

    private void btnInsertMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertMouseExited
        btnInsert.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnInsertMouseExited

    private void btnSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseEntered
        btnSearch.setForeground(MINT);
    }//GEN-LAST:event_btnSearchMouseEntered

    private void btnSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseExited
        btnSearch.setForeground(Color.white);
    }//GEN-LAST:event_btnSearchMouseExited

    private void btnModifyMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModifyMouseEntered
        btnModify.setForeground(MINT);
    }//GEN-LAST:event_btnModifyMouseEntered

    private void btnModifyMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModifyMouseExited
        btnModify.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnModifyMouseExited

    private void btnDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseEntered
        btnDelete.setForeground(MINT);
    }//GEN-LAST:event_btnDeleteMouseEntered

    private void btnDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseExited
        btnDelete.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnDeleteMouseExited

    /**
     * @param args the command line arguments
     */
    
    //METODOS PROPIOS
    
    private void initArrayVisualizer() {
        // fondo y estilo general
        getContentPane().setBackground(BG);
        // panelCells es el JPanel creado en el diseñador (dentro de scrollPaneCells)
        panelCells.setBackground(BG);
        panelCells.setOpaque(false);

        // usar BoxLayout horizontal para que las celdas queden en fila
        panelCells.setLayout(new BoxLayout(panelCells, BoxLayout.X_AXIS));
        scrollPaneCells.getViewport().setBackground(BG);
        scrollPaneCells.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPaneCells.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        // Asignar listeners a botones (si prefieres el diseñador, crea los actionPerformed y solo llama a onCreateArray() etc.)
        btnCreate.addActionListener(e -> onCreateArray());
        btnInsert.addActionListener(e -> onInsert());
        btnSearch.addActionListener(e -> onSearch());
        btnModify.addActionListener(e -> onModify());
        btnDelete.addActionListener(e -> onDelete());

        // crear arreglo inicial
        //onCreateArray();
    }
    
    // --------- OPERACIONES (Crea/Insertar/Buscar/Modificar/Eliminar) ----------
    private void onCreateArray() {
        try {
            int size = Math.max(1, Integer.parseInt(txtSize.getText().trim()));
            array = new Integer[size];
            refreshCellsUI();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Tamaño inválido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    


    public static int middleSquareHash(int clave, int tamañoArreglo) {
        
        long square = (long) clave * clave;
        String squareTxt = Long.toString(square);

        int length = String.valueOf(tamañoArreglo).length(); 
        int need = length - 1; // cantidad de dígitos centrales requeridos

        // índice de inicio: punto medio - la mitad de los dígitos que necesito
        int start = (squareTxt.length() - need) / 2;
        int end = start + need;

        String hash = squareTxt.substring(start, end);
        
        return Integer.valueOf(hash);
    }
    
    private void onInsert() {
        try {
            int value = Integer.parseInt(txtInsertValue.getText().trim());
            int n = array.length;
            int index = middleSquareHash(value, n);

            if (array[index] == null) {
                array[index] = value;
                refreshCellsUI();
                // opcional: marcar la celda insertada inmediatamente (no es animación)
                CellPanel cp = getCellPanel(index);
            } else {
                refreshCellsUI(); // actualiza la vista por si hace falta
                JOptionPane.showMessageDialog(this,
                    "No se pudo insertar, colisión en la posición " + (index + 1),
                    "Colisión",
                    JOptionPane.WARNING_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valor inválido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }




    private void onSearch() {
        try {
            final int value = Integer.parseInt(txtSearchValue.getText().trim());
            clearHighlights();

            final int n = array.length;
            final int index = middleSquareHash(value, n);

            java.util.List<Integer> steps = new java.util.ArrayList<>();
            steps.add(index);

            int foundIndex = (array[index] != null && array[index] == value) ? index : -1;

            animateSearch(steps, foundIndex);

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valor de búsqueda inválido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void animateSearch(java.util.List<Integer> steps, int foundIndex) {
        clearHighlights();
        final int[] idx = {0};
        txtSearchValue.setEnabled(false);

        Timer timer = new Timer(450, null);
        timer.addActionListener(evt -> {
            if (idx[0] >= steps.size()) {
                if (foundIndex == -1) {
                    JOptionPane.showMessageDialog(this,
                        "Valor no encontrado (colisión o nunca insertado)",
                        "Buscar",
                        JOptionPane.INFORMATION_MESSAGE);
                }
                txtSearchValue.setEnabled(true);
                timer.stop();
                return;
            }

            int pos = steps.get(idx[0]);
            CellPanel cell = getCellPanel(pos);
            if (cell != null) {
                if (pos == foundIndex) {
                    // encontrado → verde
                    cell.setHighlight(MINT);
                    scrollCellToVisible(pos);
                    txtSearchValue.setEnabled(true);
                    timer.stop();
                    return;
                } else {
                    // descartado → rojo
                    cell.setHighlight(Color.RED);
                    scrollCellToVisible(pos);
                }
            }
            idx[0]++;
        });

        timer.setInitialDelay(0);
        timer.start();
    }





    private void onModify() {
        try {
            int idx = Integer.parseInt(txtModifyIndex.getText().trim());
            int val = Integer.parseInt(txtModifyValue.getText().trim());
            if (idx < 1 || idx > array.length) {
                JOptionPane.showMessageDialog(this, "Índice fuera de rango", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            array[idx-1] = val;
            refreshCellsUI();
            highlightCell(idx-1);
            scrollCellToVisible(idx-1);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Índice o valor inválido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void onDelete() {
        try {
            int idx = Integer.parseInt(txtDeleteIndex.getText().trim());
            if (idx < 1 || idx > array.length) {
                JOptionPane.showMessageDialog(this, "Índice fuera de rango", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            array[idx-1] = null;
            refreshCellsUI();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Índice inválido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // --------- UI: refresco y utilidades ----------
    private void refreshCellsUI() {
        panelCells.removeAll();
        for (int i=0;i<array.length;i++) {
            CellPanel cell = new CellPanel(i + 1, array[i]);
            panelCells.add(cell);
            panelCells.add(Box.createRigidArea(new Dimension(8, 0)));
        }
        panelCells.revalidate();
        panelCells.repaint();
    }

    private CellPanel getCellPanel(int index) {
        Component comp = getCellComponent(index);
        return (comp instanceof CellPanel) ? (CellPanel) comp : null;
    }

    private void clearHighlights() {
        for (Component c : panelCells.getComponents()) {
            if (c instanceof CellPanel) {
                ((CellPanel)c).setHighlight(null);
            }
        }
    }

    private void highlightCell(int index) {
        Component comp = getCellComponent(index);
        if (!(comp instanceof CellPanel)) return;
        CellPanel cell = (CellPanel) comp;
        final int[] state = {0};
        Timer t = new Timer(220, null);
        t.addActionListener(evt -> {
            if (state[0] == 0) {
                cell.setHighlighted(true);
            } else if (state[0] == 1) {
                cell.setHighlighted(false);
            } else if (state[0] == 2) {
                cell.setHighlighted(true);
            } else {
                t.stop();
            }
            state[0]++;
        });
        t.setInitialDelay(0);
        t.start();
    }

    private void scrollCellToVisible(int index) {
        Component comp = getCellComponent(index);
        if (comp != null) {
            Rectangle r = comp.getBounds();
            JViewport v = scrollPaneCells.getViewport();
            Rectangle viewRect = v.getViewRect();
            r.x = Math.max(0, r.x - (viewRect.width - r.width)/2);
            v.scrollRectToVisible(r);
        }
    }

    private Component getCellComponent(int index) {
        int compIndex = index * 2; // entre cada celda hay un rigid area
        if (compIndex >= 0 && compIndex < panelCells.getComponentCount()) {
            return panelCells.getComponent(compIndex);
        }
        return null;
    }
    
    
    // --------- Clase interna para la celda ----------
    private class CellPanel extends JPanel {
        private JLabel posLabel;
        private JLabel valLabel;

        public CellPanel(int position, Integer value) {
            setLayout(new BorderLayout());
            setPreferredSize(new Dimension(CELL_WIDTH, CELL_HEIGHT));
            setMaximumSize(new Dimension(CELL_WIDTH, CELL_HEIGHT));
            setBackground(new Color(0,0,0,0));
            setOpaque(false);
            setBorder(new LineBorder(Color.WHITE, 1, true));

            posLabel = new JLabel(String.valueOf(position), SwingConstants.CENTER);
            posLabel.setForeground(LABEL_WHITE);
            posLabel.setFont(getFont().deriveFont(Font.PLAIN, 12f));
            posLabel.setOpaque(false);
            posLabel.setBorder(BorderFactory.createEmptyBorder(4,4,0,4));

            valLabel = new JLabel(value == null ? "" : String.valueOf(value), SwingConstants.CENTER);
            valLabel.setForeground(LABEL_WHITE);
            valLabel.setFont(getFont().deriveFont(Font.BOLD, 18f));
            valLabel.setOpaque(false);
            valLabel.setBorder(BorderFactory.createEmptyBorder(0,4,6,4));

            add(posLabel, BorderLayout.NORTH);
            add(valLabel, BorderLayout.CENTER);
        }

        /**
         * General highlight method:
         * - bgColor != null -> apply background color (and choose text color depending on bg)
         * - bgColor == null -> reset to default (transparent + white labels)
         */
        public void setHighlight(Color bgColor) {
            if (bgColor != null) {
                setOpaque(true);
                setBackground(bgColor);
                // texto en negro para mint (mejor contraste) y en blanco para rojo u otros fondos oscuros
                if (Color.RED.equals(bgColor)) {
                    posLabel.setForeground(Color.WHITE);
                    valLabel.setForeground(Color.WHITE);
                } else {
                    posLabel.setForeground(Color.BLACK);
                    valLabel.setForeground(Color.BLACK);
                }
            } else {
                resetHighlight();
            }
            repaint();
        }

        // Mantengo la compatibilidad con el método anterior.
        public void setHighlighted(boolean highlight) {
            if (highlight) {
                setHighlight(MINT);
            } else {
                setHighlight(null);
            }
        }

        private void resetHighlight() {
            setOpaque(false);
            setBackground(new Color(0,0,0,0));
            posLabel.setForeground(LABEL_WHITE);
            valLabel.setForeground(LABEL_WHITE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backGround;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel dragPanel;
    private javax.swing.JLabel logo;
    private javax.swing.JPanel panelCells;
    private javax.swing.JScrollPane scrollPaneCells;
    private javax.swing.JLabel txtBuscar;
    private javax.swing.JTextField txtDeleteIndex;
    private javax.swing.JLabel txtEliminar;
    private javax.swing.JTextField txtInsertValue;
    private javax.swing.JLabel txtModificarIndice;
    private javax.swing.JTextField txtModifyIndex;
    private javax.swing.JTextField txtModifyValue;
    private javax.swing.JLabel txtNuevoValor;
    private javax.swing.JTextField txtSearchValue;
    private javax.swing.JTextField txtSize;
    private javax.swing.JLabel txtTamaño;
    private javax.swing.JLabel txtValor;
    private javax.swing.JLabel volverTxt;
    // End of variables declaration//GEN-END:variables
}
