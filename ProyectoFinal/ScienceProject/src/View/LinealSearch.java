/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.awt.Color;
import java.awt.*;
import java.io.File;
import java.io.PrintWriter;
import java.util.Scanner;
import javax.swing.*;
import javax.swing.border.LineBorder;


/**
 *
 * @author Brayan
 */
public class LinealSearch extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(LinealSearch.class.getName());
    
    private static final Color BG = new Color(255, 255, 255);
    private static final Color MINT = new Color(124, 212, 187);
    private static final Color LABEL_BLACK = Color.black;
    private static final int CELL_WIDTH = 100;
    private static final int CELL_HEIGHT = 70;
    private Integer longitudClaves = null; 

    
    private Integer[] array; // modelo del arreglo (null = vac√≠o)
    // Merge Sort implementation for Integer[]
    private void mergeSort(Integer[] arr) {
        if (arr == null || arr.length < 2) return;
        mergeSortHelper(arr, 0, arr.length - 1);
    }
    private void mergeSortHelper(Integer[] arr, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            mergeSortHelper(arr, left, mid);
            mergeSortHelper(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }
    private void merge(Integer[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;
        Integer[] L = new Integer[n1];
        Integer[] R = new Integer[n2];
        for (int i = 0; i < n1; i++) L[i] = arr[left + i];
        for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];
        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (L[i] == null) {
                arr[k++] = R[j++];
            } else if (j < n2 && R[j] == null) {
                arr[k++] = L[i++];
            } else if (L[i] <= R[j]) {
                arr[k++] = L[i++];
            } else {
                arr[k++] = R[j++];
            }
        }
        while (i < n1) arr[k++] = L[i++];
        while (j < n2) arr[k++] = R[j++];
    }
    
    int xMouse, yMouse;
    
    private static LinealSearch instance;
    
    public static LinealSearch getInstance() {
        if (instance == null) {
            instance = new LinealSearch();
        }
        return instance;
    }

    /**
     * Creates new form LinealSearch
     */
    public LinealSearch() {
        setNimbusLookAndFeel();
        initComponents();
        initArrayVisualizer();
    }
    
    private void setNimbusLookAndFeel() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backGround = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        volverTxt = new javax.swing.JLabel();
        dragPanel = new javax.swing.JPanel();
        scrollPaneCells = new javax.swing.JScrollPane();
        panelCells = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        txtKey = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtKeySize = new javax.swing.JLabel();
        sizeArrayField = new javax.swing.JTextField();
        txtArraySize = new javax.swing.JLabel();
        sizeKeyField = new javax.swing.JTextField();
        txtValor = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnOpen = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hash&Seek");
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backGround.setBackground(new java.awt.Color(255, 255, 255));
        backGround.setForeground(new java.awt.Color(0, 0, 0));
        backGround.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logo.setFont(new java.awt.Font("Calibri", 3, 48)); // NOI18N
        logo.setForeground(new java.awt.Color(124, 212, 187));
        logo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/LinealSearchTitle.png"))); // NOI18N
        backGround.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 840, 120));

        volverTxt.setFont(new java.awt.Font("Cambria Math", 0, 48)); // NOI18N
        volverTxt.setForeground(new java.awt.Color(0, 0, 0));
        volverTxt.setText("< Volver");
        volverTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        volverTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volverTxtMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                volverTxtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                volverTxtMouseExited(evt);
            }
        });
        backGround.add(volverTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        dragPanel.setBackground(new java.awt.Color(255, 255, 255));
        dragPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        dragPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                dragPanelMouseDragged(evt);
            }
        });
        dragPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dragPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout dragPanelLayout = new javax.swing.GroupLayout(dragPanel);
        dragPanel.setLayout(dragPanelLayout);
        dragPanelLayout.setHorizontalGroup(
            dragPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
        );
        dragPanelLayout.setVerticalGroup(
            dragPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        backGround.add(dragPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 50));

        panelCells.setBackground(new java.awt.Color(255, 255, 255));
        scrollPaneCells.setViewportView(panelCells);

        backGround.add(scrollPaneCells, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 1250, 360));

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));

        txtKey.setBackground(new java.awt.Color(255, 255, 255));
        txtKey.setForeground(new java.awt.Color(0, 0, 0));

        btnCreate.setBackground(new java.awt.Color(51, 51, 51));
        btnCreate.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnCreate.setForeground(new java.awt.Color(255, 255, 255));
        btnCreate.setText("Crear");
        btnCreate.setBorder(null);
        btnCreate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCreateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCreateMouseExited(evt);
            }
        });
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnInsert.setBackground(new java.awt.Color(51, 51, 51));
        btnInsert.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnInsert.setForeground(new java.awt.Color(255, 255, 255));
        btnInsert.setText("Insertar");
        btnInsert.setBorder(null);
        btnInsert.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInsert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnInsertMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnInsertMouseExited(evt);
            }
        });
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(51, 51, 51));
        btnSearch.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Buscar");
        btnSearch.setBorder(null);
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSearchMouseExited(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(51, 51, 51));
        btnDelete.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Eliminar");
        btnDelete.setBorder(null);
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDeleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDeleteMouseExited(evt);
            }
        });

        txtKeySize.setForeground(new java.awt.Color(0, 0, 0));
        txtKeySize.setText("Tama√±o de la Clave:");

        sizeArrayField.setBackground(new java.awt.Color(255, 255, 255));
        sizeArrayField.setForeground(new java.awt.Color(0, 0, 0));
        sizeArrayField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeArrayFieldActionPerformed(evt);
            }
        });

        txtArraySize.setForeground(new java.awt.Color(0, 0, 0));
        txtArraySize.setText("Tama√±o:");

        sizeKeyField.setBackground(new java.awt.Color(255, 255, 255));
        sizeKeyField.setForeground(new java.awt.Color(0, 0, 0));
        sizeKeyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeKeyFieldActionPerformed(evt);
            }
        });

        txtValor.setForeground(new java.awt.Color(0, 0, 0));
        txtValor.setText("clave:");

        jLabel3.setFont(new java.awt.Font("Cambria Math", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Insertar, Buscar o Eliminar Clave");

        jLabel2.setFont(new java.awt.Font("Cambria Math", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Crear estructura");

        btnOpen.setBackground(new java.awt.Color(51, 51, 51));
        btnOpen.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnOpen.setForeground(new java.awt.Color(255, 255, 255));
        btnOpen.setText("Recuperar");
        btnOpen.setBorder(null);
        btnOpen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnOpen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnOpenMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnOpenMouseExited(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(51, 51, 51));
        btnSave.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Guardar");
        btnSave.setBorder(null);
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSaveMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtArraySize)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeArrayField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtKeySize)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeKeyField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(165, 165, 165))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(122, 122, 122)
                                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtValor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel3)))
                .addGap(193, 193, 193)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtArraySize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeArrayField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtKeySize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeKeyField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        backGround.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 1260, 170));

        getContentPane().add(backGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverTxtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverTxtMouseEntered
        volverTxt.setForeground(new Color(124, 212, 187));
    }//GEN-LAST:event_volverTxtMouseEntered

    private void volverTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverTxtMouseExited
        volverTxt.setForeground(Color.black);
    }//GEN-LAST:event_volverTxtMouseExited

    private void volverTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverTxtMouseClicked
        this.setVisible(false);
        PrincipalPage.getInstance().setVisible(true);
    }//GEN-LAST:event_volverTxtMouseClicked

    private void dragPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragPanelMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_dragPanelMousePressed

    private void dragPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragPanelMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_dragPanelMouseDragged

    private void sizeArrayFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeArrayFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizeArrayFieldActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnCreateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateMouseEntered
        btnCreate.setForeground(MINT);
    }//GEN-LAST:event_btnCreateMouseEntered

    private void btnCreateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateMouseExited
        btnCreate.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnCreateMouseExited

    private void btnInsertMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertMouseEntered
        btnInsert.setForeground(MINT);
    }//GEN-LAST:event_btnInsertMouseEntered

    private void btnInsertMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertMouseExited
        btnInsert.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnInsertMouseExited

    private void btnSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseEntered
        btnSearch.setForeground(MINT);
    }//GEN-LAST:event_btnSearchMouseEntered

    private void btnSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseExited
        btnSearch.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnSearchMouseExited

    private void btnDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseEntered
        btnDelete.setForeground(MINT);
    }//GEN-LAST:event_btnDeleteMouseEntered

    private void btnDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseExited
        btnDelete.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnDeleteMouseExited

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreateActionPerformed

    private void sizeKeyFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeKeyFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizeKeyFieldActionPerformed

    private void btnOpenMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnOpenMouseEntered

    private void btnOpenMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnOpenMouseExited

    private void btnSaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveMouseEntered

    private void btnSaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveMouseExited

    /**
     * @param args the command line arguments
     */
    
    //METODOS PROPIOS
    
    private void initArrayVisualizer() {
        // fondo y estilo general
        getContentPane().setBackground(BG);
        // panelCells es el JPanel creado en el dise√±ador (dentro de scrollPaneCells)
        panelCells.setBackground(BG);
        panelCells.setOpaque(false);

        // usar BoxLayout horizontal para que las celdas queden en fila
        panelCells.setLayout(new BoxLayout(panelCells, BoxLayout.X_AXIS));
        scrollPaneCells.getViewport().setBackground(BG);
        scrollPaneCells.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPaneCells.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        // Asignar listeners a botones (si prefieres el dise√±ador, crea los actionPerformed y solo llama a onCreateArray() etc.)
        btnCreate.addActionListener(_ -> onCreateArray());
        btnInsert.addActionListener(_ -> onInsert());
        btnSearch.addActionListener(_ -> onSearch());
        btnDelete.addActionListener(_ -> onDelete());

        // Botones de guardado y importacion de archivo
        btnSave.addActionListener(_ -> guardarArray(array));
        btnOpen.addActionListener(_ -> {
            Integer[] nuevoArray = abrirArray();
            if (nuevoArray != null) {
                array = nuevoArray;
                refreshCellsUI(); // m√©todo tuyo para actualizar la vista
            }
        });
        
    }
    
    
    // --------- Guardado y Recuperacion de Archivos ----------------------------
    
    private void guardarArray(Integer[] array) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Archivos de B√∫squeda Lineal", "lin"));

        int option = fileChooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            // Asegurar extensi√≥n .bin.busq
            if (!file.getName().toLowerCase().endsWith(".lin")) {
                file = new File(file.getParentFile(), file.getName() + ".lin");
            }

            try (PrintWriter writer = new PrintWriter(file)) {
                // Guardamos longitudClaves en la primera l√≠nea (o vac√≠o si es null)
                if (longitudClaves == null) {
                    writer.println("");
                } else {
                    writer.println(longitudClaves);
                }
                
                for (Integer num : array) {
                    if (num == null) {
                        writer.println("");
                    } else {
                        writer.println(num);
                    }
                    
                }
                JOptionPane.showMessageDialog(this, "Archivo guardado correctamente.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al guardar: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private Integer[] abrirArray() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Archivos de B√∫squeda Lineal", "lin"));

        int option = fileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            // Validar que el archivo tenga la extensi√≥n correcta
            if (!file.getName().toLowerCase().endsWith(".lin")) {
                JOptionPane.showMessageDialog(this, "El archivo seleccionado no corresponde a una b√∫squeda Lineal.",
                        "Extensi√≥n incorrecta", JOptionPane.WARNING_MESSAGE);
                return null;
            }

            try (Scanner scanner = new Scanner(file)) {
                java.util.List<Integer> lista = new java.util.ArrayList<>();
                
                // Primera l√≠nea = longitudClaves
                if (scanner.hasNextLine()) {
                    String linea = scanner.nextLine().trim();
                    if (linea.isEmpty()) {
                        longitudClaves = null;
                    } else {
                        longitudClaves = Integer.parseInt(linea);
                    }
                }
                while (scanner.hasNextLine()) {
                    String linea = scanner.nextLine().trim();
                    
                    if (!linea.isEmpty()) {
                        lista.add(Integer.parseInt(linea));
                    } else {
                        lista.add(null);
                    }
                }
                JOptionPane.showMessageDialog(this, "Archivo cargado correctamente.");
                return lista.toArray(new Integer[0]);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al abrir: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        return null;
    }

    
    // --------- OPERACIONES (Crea/Insertar/Buscar/Modificar/Eliminar) ----------
    private void onCreateArray() {
        try {
            int size = Math.max(1, Integer.parseInt(sizeArrayField.getText().trim()));
            array = new Integer[size];
            longitudClaves = Math.max(1, Integer.parseInt(sizeKeyField.getText().trim()));
            refreshCellsUI();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Tama√±o o longitud de clave inv√°lido(s)", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void onInsert() {
        try {
            if (array == null) {
                JOptionPane.showMessageDialog(this, "Por Favor cree la Estructura", "Estructura no creada", JOptionPane.WARNING_MESSAGE);
                return;
            }
            String input = txtKey.getText().trim();

            // validar si es n√∫mero
            int value = Integer.parseInt(input);

            // 1. validar longitud de la clave
            if (longitudClaves == null) {
                JOptionPane.showMessageDialog(this, "Longitud de claves no definida");
                return;
            } else if (input.length() != longitudClaves) {
                JOptionPane.showMessageDialog(this,
                    "Todas las claves deben tener " + longitudClaves + " d√≠gitos",
                    "Longitud inv√°lida",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }

            // 2. validar si la clave ya existe (no claves repetidas)
            for (Integer existing : array) {
                if (existing != null && existing == value) {
                    JOptionPane.showMessageDialog(this,
                        "La clave " + value + " ya existe en la tabla",
                        "Clave repetida",
                        JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }

            // 3. inserci√≥n lineal: buscar primer espacio libre
            boolean inserted = false;
            for (int i = 0; i < array.length; i++) {
                if (array[i] == null) {
                    array[i] = value;
                    mergeSort(array);
                    refreshCellsUI();
                    inserted = true;
                    break;
                }
            }

            if (!inserted) {
                JOptionPane.showMessageDialog(this,
                    "No se pudo insertar, la tabla est√° llena",
                    "Tabla llena",
                    JOptionPane.WARNING_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valor inv√°lido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void onSearch() {
        try {
            String input = txtKey.getText().trim();
            final int value = Integer.parseInt(input);
            if (longitudClaves == null) {
                JOptionPane.showMessageDialog(this,
                    "Debe Insertar al menos una clave",
                    "Estructura Vac√≠a",
                    JOptionPane.WARNING_MESSAGE);
                return;
            } else if (input.length() != longitudClaves) {
                JOptionPane.showMessageDialog(this,
                    "Todas las claves deben tener " + longitudClaves + " d√≠gitos",
                    "Longitud inv√°lida",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            // Sort array before searching
            mergeSort(array);
            refreshCellsUI();
            clearHighlights();
            java.util.List<Integer> steps = new java.util.ArrayList<>();
            int foundIndex = -1;
            for (int i = 0; i < array.length; i++) {
                steps.add(i);
                if (array[i] != null && array[i] == value) {
                    foundIndex = i;
                    break;
                }
            }
            animateSearch(steps, foundIndex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valor de b√∫squeda inv√°lido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void animateSearch(java.util.List<Integer> steps, int foundIndex) {
        clearHighlights();
        final int[] idx = {0};
        txtKey.setEnabled(false);

        Timer timer = new Timer(400, null);
        timer.addActionListener(_ -> {
            if (idx[0] >= steps.size()) {
                if (foundIndex == -1) {
                    JOptionPane.showMessageDialog(this,
                        "Valor no encontrado (colisi√≥n o nunca insertado)",
                        "Buscar",
                        JOptionPane.INFORMATION_MESSAGE);
                }
                txtKey.setEnabled(true);
                timer.stop();
                return;
            }

            int pos = steps.get(idx[0]);
            CellPanel cell = getCellPanel(pos);
            if (cell != null) {
                if (pos == foundIndex) {
                    // encontrado ‚Üí verde
                    cell.setHighlight(MINT);
                    scrollCellToVisible(pos);
                    txtKey.setEnabled(true);
                    timer.stop();
                    return;
                } else {
                    // descartado ‚Üí rojo
                    cell.setHighlight(Color.RED);
                    scrollCellToVisible(pos);
                }
            }
            idx[0]++;
        });

        timer.setInitialDelay(0);
        timer.start();
    }
    
    private void animateDelete(java.util.List<Integer> steps, int foundIndex, Runnable onFinished) {
        clearHighlights();
        final int[] idx = {0};
        txtKey.setEnabled(false);

        Timer timer = new Timer(400, null);
        timer.addActionListener(_ -> {
            if (idx[0] >= steps.size()) {
                if (foundIndex == -1) {
                    JOptionPane.showMessageDialog(this,
                        "Valor no encontrado (colisi√≥n o nunca insertado)",
                        "Buscar",
                        JOptionPane.INFORMATION_MESSAGE);
                }
                txtKey.setEnabled(true);
                timer.stop();

                // ‚úÖ LLAMAR AL CALLBACK CUANDO TERMINA LA ANIMACI√ìN
                if (onFinished != null) {
                    onFinished.run();
                }
                return;
            }

            int pos = steps.get(idx[0]);
            CellPanel cell = getCellPanel(pos);
            if (cell != null) {
                if (pos == foundIndex) {
                    // encontrado ‚Üí verde
                    cell.setHighlight(MINT);
                    scrollCellToVisible(pos);
                    txtKey.setEnabled(true);
                    timer.stop();

                    // ‚úÖ TAMBI√âN LLAMAR AL CALLBACK CUANDO ENCUENTRA EL ELEMENTO
                    if (onFinished != null) {
                        onFinished.run();
                    }
                    return;
                } else {
                    // descartado ‚Üí rojo
                    cell.setHighlight(Color.RED);
                    scrollCellToVisible(pos);
                }
            }
            idx[0]++;
        });

        timer.setInitialDelay(0);
        timer.start();
    }

    private void onDelete() {
        try {
            String input = txtKey.getText().trim();

            // validar si es n√∫mero
            int value = Integer.parseInt(input);

            // validar longitud de la clave
            if (longitudClaves == null) {
                JOptionPane.showMessageDialog(this,
                    "Debe insertar al menos una clave antes de eliminar",
                    "Estructura vac√≠a",
                    JOptionPane.WARNING_MESSAGE);
                return;
            } else if (input.length() != longitudClaves) {
                JOptionPane.showMessageDialog(this,
                    "Todas las claves deben tener " + longitudClaves + " d√≠gitos",
                    "Longitud inv√°lida",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }

            mergeSort(array);
            refreshCellsUI();
            clearHighlights();
            java.util.List<Integer> steps = new java.util.ArrayList<>();
            final int[] foundIndex = {-1};
            for (int i = 0; i < array.length; i++) {
                steps.add(i);
                if (array[i] != null && array[i] == value) {
                    foundIndex[0] = i;
                    break;
                }
            }
            animateDelete(steps, foundIndex[0], () -> {
                if (foundIndex[0] != -1) {
                    array[foundIndex[0]] = null;
                    refreshCellsUI();
                    JOptionPane.showMessageDialog(this,
                        "Clave " + value + " eliminada de la posici√≥n " + (foundIndex[0] + 1),
                        "Eliminado",
                        JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this,
                        "La clave " + value + " no se encuentra en la tabla",
                        "No encontrado",
                        JOptionPane.WARNING_MESSAGE);
                }
            });

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Clave inv√°lida", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    
    // --------- UI: refresco y utilidades ----------
    private void refreshCellsUI() {
        panelCells.removeAll();
        panelCells.add(Box.createRigidArea(new Dimension(8, 0)));
        for (int i=0;i<array.length;i++) {
            CellPanel cell = new CellPanel(i + 1, array[i]);
            panelCells.add(cell);
        }
        panelCells.revalidate();
        panelCells.repaint();
    }

    private CellPanel getCellPanel(int index) {
        Component comp = getCellComponent(index);
        return (comp instanceof CellPanel) ? (CellPanel) comp : null;
    }

    private void clearHighlights() {
        for (Component c : panelCells.getComponents()) {
            if (c instanceof CellPanel) {
                ((CellPanel)c).setHighlight(null);
            }
        }
    }


    private void scrollCellToVisible(int index) {
        Component comp = getCellComponent(index);
        if (comp != null) {
            Rectangle r = comp.getBounds();
            JViewport v = scrollPaneCells.getViewport();
            Rectangle viewRect = v.getViewRect();
            r.x = Math.max(0, r.x - (viewRect.width - r.width)/2);
            v.scrollRectToVisible(r);
        }
    }

    private Component getCellComponent(int index) {
        int compIndex = index + 1; // rigid area solo al principio como margen
        if (compIndex >= 0 && compIndex < panelCells.getComponentCount()) {
            return panelCells.getComponent(compIndex);
        }
        return null;
    }
    
    
    // --------- Clase interna para la celda ----------
    private class CellPanel extends JPanel {
        private JLabel posLabel;
        private JLabel valLabel;

        public CellPanel(int position, Integer value) {
            setLayout(new BorderLayout());
            setPreferredSize(new Dimension(CELL_WIDTH, CELL_HEIGHT));
            setMaximumSize(new Dimension(CELL_WIDTH, CELL_HEIGHT));
            setBackground(new Color(0,0,0,0));
            setOpaque(false);
            setBorder(new LineBorder(Color.black, 1, true));

            posLabel = new JLabel(String.valueOf(position), SwingConstants.CENTER);
            posLabel.setForeground(LABEL_BLACK);
            posLabel.setFont(getFont().deriveFont(Font.PLAIN, 12f));
            posLabel.setOpaque(false);
            posLabel.setBorder(BorderFactory.createEmptyBorder(4,4,0,4));

            valLabel = new JLabel(value == null ? "" : String.valueOf(value), SwingConstants.CENTER);
            valLabel.setForeground(LABEL_BLACK);
            valLabel.setFont(getFont().deriveFont(Font.BOLD, 18f));
            valLabel.setOpaque(false);
            valLabel.setBorder(BorderFactory.createEmptyBorder(0,4,6,4));

            add(posLabel, BorderLayout.NORTH);
            add(valLabel, BorderLayout.CENTER);
        }

        /**
         * General highlight method:
         * - bgColor != null -> apply background color (and choose text color depending on bg)
         * - bgColor == null -> reset to default (transparent + white labels)
         */
        public void setHighlight(Color bgColor) {
            if (bgColor != null) {
                setOpaque(true);
                setBackground(bgColor);
                // texto en negro para mint (mejor contraste) y en blanco para rojo u otros fondos oscuros
                if (Color.RED.equals(bgColor)) {
                    posLabel.setForeground(Color.WHITE);
                    valLabel.setForeground(Color.WHITE);
                } else {
                    posLabel.setForeground(Color.BLACK);
                    valLabel.setForeground(Color.BLACK);
                }
            } else {
                resetHighlight();
            }
            repaint();
        }

        private void resetHighlight() {
            setOpaque(false);
            setBackground(new Color(0,0,0,0));
            posLabel.setForeground(LABEL_BLACK);
            valLabel.setForeground(LABEL_BLACK);
        }
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backGround;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel dragPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel logo;
    private javax.swing.JPanel panelCells;
    private javax.swing.JScrollPane scrollPaneCells;
    private javax.swing.JTextField sizeArrayField;
    private javax.swing.JTextField sizeKeyField;
    private javax.swing.JLabel txtArraySize;
    private javax.swing.JTextField txtKey;
    private javax.swing.JLabel txtKeySize;
    private javax.swing.JLabel txtValor;
    private javax.swing.JLabel volverTxt;
    // End of variables declaration//GEN-END:variables
}
